// Decode.cpp: implementation of the Decode class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "TaoBaoDecode.h"
#include "des.h"
 
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
//淘宝的post解密uid的key
static unsigned char des_key[8]={'f','l','g','f','l','g','3','2'};
//淘宝的post登陆解密pass的3des key
static unsigned char DES3_keys[3][8] =
{
    { 'g', 'o', 'g','o', 'k', 'i', 'n', 'g' },
    { 0x5f, 0x2d, 0x33, 0x45, 0x37, 0x54, 0x3d, 0x5f },
    { 'g', 'o', 'g','o', 'k', 'i', 'n', 'g' }
};

///////////////////////聊天记录///////////////////////////////////////////////////
unsigned char g_buf[256]={
0xe9,0xf4,0x8b,0x9e,0xaa,0x50,0x2f,0x3e,0xc2,0xdb,0x8c,0xb8,0x08,0xc7,0x52,0x75
,0x59,0x0a,0x41,0xcb,0x94,0x34,0x21,0x03,0x53,0x06,0x43,0x79,0x15,0x5c,0xe3,0x2a
,0xfb,0x6b,0x4a,0x48,0x1c,0x9c,0x17,0x98,0x05,0x11,0x40,0x86,0x46,0xf1,0xcc,0x9a
,0xa9,0x1f,0x2e,0x57,0xd6,0x8e,0xda,0xb6,0x64,0xca,0x67,0x31,0x2c,0x3d,0x5e,0x85
,0x5f,0x04,0xa0,0xc3,0x81,0xd7,0xf5,0xd3,0x39,0xed,0x24,0xd1,0x54,0x36,0x8f,0x35
,0xae,0x07,0x4f,0xc9,0x71,0x37,0xa5,0xbf,0x51,0x61,0x8a,0x69,0x77,0x6a,0x0e,0x2b
,0x4d,0x3b,0xfe,0xa2,0xef,0x8d,0xb4,0x5d,0x90,0x1e,0xfc,0x26,0x14,0xf9,0x1a,0xd5
,0x58,0x12,0x76,0x0d,0xe4,0xeb,0x88,0x2d,0x9d,0xee,0x78,0x97,0xf7,0x32,0x7d,0x19
,0xc5,0xad,0x10,0x7b,0xf3,0x1d,0xe8,0x55,0x3f,0x09,0x01,0xac,0x7a,0x3a,0x5b,0x56
,0x13,0xc1,0x6e,0x0c,0x4b,0x7f,0x60,0xd8,0xd4,0xa7,0x68,0xdf,0xce,0x95,0x3c,0x99
,0x74,0x25,0x72,0xf8,0x93,0x00,0x28,0xbd,0xc4,0xc6,0xfd,0xe0,0xf2,0x23,0x27,0xb9
,0x29,0xba,0xe5,0xbe,0xcd,0x5a,0x89,0x70,0xd0,0xea,0xf0,0xff,0xb7,0xab,0x47,0xf6
,0x6d,0xb1,0x80,0xfa,0xc0,0xa3,0x82,0x73,0xaf,0xec,0x33,0x20,0x63,0x9f,0xe1,0x9b
,0x4c,0xd2,0xe2,0x42,0x4e,0x16,0x84,0x65,0x7e,0x6f,0xb2,0x45,0xb0,0x83,0xbc,0x7c
,0xa4,0xa8,0xde,0x62,0xa1,0x22,0xdd,0x0f,0xc8,0x44,0x6c,0x30,0xe7,0xcf,0x49,0xbb
,0xe6,0x38,0x66,0xa6,0xd9,0x87,0x1b,0x02,0xb3,0xdc,0x18,0x92,0x0b,0xb5,0x91,0x96
};



//////////////////////变形des/////////////////////////////////////////////// 
 //初始化变形des　的key
void sub_58CD00();
//解码
void sub_58D2B0();

//800h第二层解码
BYTE struct_800h[0x800]=
{
 0x00,0x82,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x02,0x82,0x80,0x00
,0x02,0x80,0x80,0x00,0x02,0x82,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x00
,0x00,0x02,0x00,0x00,0x00,0x82,0x80,0x00,0x02,0x82,0x80,0x00,0x00,0x02,0x00,0x00
,0x02,0x02,0x80,0x00,0x02,0x80,0x80,0x00,0x00,0x00,0x80,0x00,0x02,0x00,0x00,0x00
,0x02,0x02,0x00,0x00,0x00,0x02,0x80,0x00,0x00,0x02,0x80,0x00,0x00,0x82,0x00,0x00
,0x00,0x82,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x80,0x80,0x00,0x02,0x02,0x80,0x00
,0x02,0x80,0x00,0x00,0x02,0x00,0x80,0x00,0x02,0x00,0x80,0x00,0x02,0x80,0x00,0x00
,0x00,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x02,0x82,0x00,0x00,0x00,0x00,0x80,0x00
,0x00,0x80,0x00,0x00,0x02,0x82,0x80,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x80,0x00
,0x00,0x82,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x02,0x00,0x00
,0x02,0x80,0x80,0x00,0x00,0x80,0x00,0x00,0x00,0x82,0x00,0x00,0x02,0x00,0x80,0x00
,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x02,0x80,0x00,0x02,0x82,0x00,0x00
,0x02,0x82,0x80,0x00,0x02,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x02,0x02,0x80,0x00
,0x02,0x00,0x80,0x00,0x02,0x02,0x00,0x00,0x02,0x82,0x00,0x00,0x00,0x82,0x80,0x00
,0x02,0x02,0x00,0x00,0x00,0x02,0x80,0x00,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00
,0x02,0x80,0x00,0x00,0x00,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x80,0x80,0x00
,0x10,0x40,0x08,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x10,0x40,0x08,0x00
,0x00,0x00,0x08,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x08,0x40,0x10,0x40,0x00,0x40
,0x10,0x00,0x00,0x40,0x10,0x40,0x08,0x40,0x00,0x40,0x08,0x40,0x00,0x00,0x00,0x40
,0x00,0x40,0x00,0x40,0x00,0x00,0x08,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x08,0x40
,0x00,0x40,0x08,0x00,0x10,0x00,0x08,0x00,0x10,0x40,0x00,0x40,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0x00,0x10,0x40,0x08,0x00,0x00,0x00,0x08,0x40
,0x10,0x00,0x08,0x00,0x10,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x40,0x08,0x00
,0x10,0x40,0x00,0x00,0x00,0x40,0x08,0x40,0x00,0x00,0x08,0x40,0x10,0x40,0x00,0x00
,0x00,0x00,0x00,0x00,0x10,0x40,0x08,0x00,0x10,0x00,0x08,0x40,0x00,0x00,0x08,0x00
,0x10,0x40,0x00,0x40,0x00,0x00,0x08,0x40,0x00,0x40,0x08,0x40,0x00,0x40,0x00,0x00
,0x00,0x00,0x08,0x40,0x00,0x40,0x00,0x40,0x10,0x00,0x00,0x00,0x10,0x40,0x08,0x40
,0x10,0x40,0x08,0x00,0x10,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x40
,0x10,0x40,0x00,0x00,0x00,0x40,0x08,0x40,0x00,0x00,0x08,0x00,0x10,0x00,0x00,0x40
,0x10,0x00,0x08,0x00,0x10,0x40,0x00,0x40,0x10,0x00,0x00,0x40,0x10,0x00,0x08,0x00
,0x00,0x40,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x10,0x40,0x00,0x00
,0x00,0x00,0x00,0x40,0x10,0x00,0x08,0x40,0x10,0x40,0x08,0x40,0x00,0x40,0x08,0x00
,0x04,0x01,0x00,0x00,0x00,0x01,0x01,0x04,0x00,0x00,0x00,0x00,0x04,0x00,0x01,0x04
,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x04,0x01,0x01,0x00,0x00,0x01,0x00,0x04
,0x04,0x00,0x01,0x00,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x00,0x00,0x01,0x00
,0x04,0x01,0x01,0x04,0x04,0x00,0x01,0x00,0x00,0x00,0x01,0x04,0x04,0x01,0x00,0x00
,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x01,0x01,0x04,0x00,0x01,0x00,0x00
,0x00,0x01,0x01,0x00,0x00,0x00,0x01,0x04,0x04,0x00,0x01,0x04,0x04,0x01,0x01,0x00
,0x04,0x01,0x00,0x04,0x00,0x01,0x01,0x00,0x00,0x00,0x01,0x00,0x04,0x01,0x00,0x04
,0x04,0x00,0x00,0x00,0x04,0x01,0x01,0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x04
,0x00,0x01,0x01,0x04,0x00,0x00,0x00,0x04,0x04,0x00,0x01,0x00,0x04,0x01,0x00,0x00
,0x00,0x00,0x01,0x00,0x00,0x01,0x01,0x04,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00
,0x00,0x01,0x00,0x00,0x04,0x00,0x01,0x00,0x04,0x01,0x01,0x04,0x00,0x01,0x00,0x04
,0x04,0x00,0x00,0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x01,0x04
,0x04,0x01,0x00,0x04,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x04,0x04,0x01,0x01,0x04
,0x04,0x00,0x00,0x00,0x04,0x01,0x01,0x00,0x00,0x01,0x01,0x00,0x04,0x00,0x00,0x04
,0x00,0x00,0x01,0x04,0x04,0x01,0x00,0x04,0x04,0x01,0x00,0x00,0x00,0x00,0x01,0x04
,0x04,0x01,0x01,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x01,0x04,0x00,0x01,0x01,0x00
,0x00,0x10,0x40,0x80,0x40,0x10,0x00,0x80,0x40,0x10,0x00,0x80,0x40,0x00,0x00,0x00
,0x40,0x10,0x40,0x00,0x40,0x00,0x40,0x80,0x00,0x00,0x40,0x80,0x00,0x10,0x00,0x80
,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x00,0x10,0x40,0x00,0x40,0x10,0x40,0x80
,0x40,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x40,0x80
,0x00,0x00,0x00,0x80,0x00,0x10,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x10,0x40,0x80
,0x40,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x10,0x00,0x80,0x40,0x10,0x00,0x00
,0x40,0x00,0x40,0x80,0x00,0x00,0x00,0x80,0x40,0x10,0x00,0x00,0x40,0x00,0x40,0x00
,0x00,0x10,0x00,0x00,0x40,0x10,0x40,0x00,0x40,0x10,0x40,0x80,0x40,0x00,0x00,0x80
,0x40,0x00,0x40,0x00,0x00,0x00,0x40,0x80,0x00,0x10,0x40,0x00,0x40,0x10,0x40,0x80
,0x40,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00
,0x40,0x10,0x00,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x80,0x00,0x00,0x00,0x80
,0x00,0x10,0x40,0x80,0x40,0x10,0x00,0x80,0x40,0x10,0x00,0x80,0x40,0x00,0x00,0x00
,0x40,0x10,0x40,0x80,0x40,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x10,0x00,0x00
,0x00,0x00,0x40,0x80,0x00,0x10,0x00,0x80,0x40,0x10,0x40,0x00,0x40,0x00,0x40,0x80
,0x00,0x10,0x00,0x80,0x40,0x10,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x10,0x40,0x80
,0x40,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x10,0x00,0x00,0x40,0x10,0x40,0x00
,0x80,0x00,0x00,0x00,0x80,0x00,0x04,0x01,0x00,0x00,0x04,0x01,0x80,0x00,0x00,0x21
,0x00,0x00,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x01
,0x80,0x00,0x04,0x20,0x00,0x00,0x04,0x00,0x80,0x00,0x00,0x01,0x80,0x00,0x04,0x20
,0x80,0x00,0x00,0x21,0x00,0x00,0x04,0x21,0x80,0x00,0x04,0x00,0x00,0x00,0x00,0x20
,0x00,0x00,0x00,0x01,0x00,0x00,0x04,0x20,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00
,0x80,0x00,0x00,0x20,0x80,0x00,0x04,0x21,0x80,0x00,0x04,0x21,0x80,0x00,0x00,0x01
,0x00,0x00,0x04,0x21,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21
,0x80,0x00,0x04,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x21,0x80,0x00,0x04,0x00
,0x00,0x00,0x04,0x00,0x80,0x00,0x00,0x21,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01
,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x01,0x80,0x00,0x00,0x21,0x80,0x00,0x04,0x20
,0x80,0x00,0x00,0x01,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x21,0x80,0x00,0x04,0x01
,0x80,0x00,0x04,0x20,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x04,0x21
,0x80,0x00,0x04,0x21,0x80,0x00,0x04,0x00,0x00,0x00,0x00,0x21,0x80,0x00,0x04,0x21
,0x00,0x00,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x21
,0x80,0x00,0x04,0x00,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x20,0x00,0x00,0x04,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x80,0x00,0x04,0x01,0x80,0x00,0x00,0x20
,0x08,0x00,0x00,0x10,0x00,0x00,0x20,0x10,0x00,0x20,0x00,0x00,0x08,0x20,0x20,0x10
,0x00,0x00,0x20,0x10,0x08,0x00,0x00,0x00,0x08,0x20,0x20,0x10,0x00,0x00,0x20,0x00
,0x00,0x20,0x00,0x10,0x08,0x20,0x20,0x00,0x00,0x00,0x20,0x00,0x08,0x00,0x00,0x10
,0x08,0x00,0x20,0x00,0x00,0x20,0x00,0x10,0x00,0x00,0x00,0x10,0x08,0x20,0x00,0x00
,0x00,0x00,0x00,0x00,0x08,0x00,0x20,0x00,0x08,0x20,0x00,0x10,0x00,0x20,0x00,0x00
,0x00,0x20,0x20,0x00,0x08,0x20,0x00,0x10,0x08,0x00,0x00,0x00,0x08,0x00,0x20,0x10
,0x08,0x00,0x20,0x10,0x00,0x00,0x00,0x00,0x08,0x20,0x20,0x00,0x00,0x20,0x20,0x10
,0x08,0x20,0x00,0x00,0x00,0x20,0x20,0x00,0x00,0x20,0x20,0x10,0x00,0x00,0x00,0x10
,0x00,0x20,0x00,0x10,0x08,0x00,0x00,0x00,0x08,0x00,0x20,0x10,0x00,0x20,0x20,0x00
,0x08,0x20,0x20,0x10,0x00,0x00,0x20,0x00,0x08,0x20,0x00,0x00,0x08,0x00,0x00,0x10
,0x00,0x00,0x20,0x00,0x00,0x20,0x00,0x10,0x00,0x00,0x00,0x10,0x08,0x20,0x00,0x00
,0x08,0x00,0x00,0x10,0x08,0x20,0x20,0x10,0x00,0x20,0x20,0x00,0x00,0x00,0x20,0x10
,0x08,0x20,0x20,0x00,0x00,0x20,0x20,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x20,0x10
,0x08,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x20,0x10,0x08,0x20,0x20,0x00
,0x00,0x20,0x00,0x00,0x08,0x00,0x20,0x00,0x08,0x20,0x00,0x10,0x00,0x00,0x00,0x00
,0x00,0x20,0x20,0x10,0x00,0x00,0x00,0x10,0x08,0x00,0x20,0x00,0x08,0x20,0x00,0x10
,0x00,0x00,0x10,0x00,0x01,0x00,0x10,0x02,0x01,0x04,0x00,0x02,0x00,0x00,0x00,0x00
,0x00,0x04,0x00,0x00,0x01,0x04,0x00,0x02,0x01,0x04,0x10,0x00,0x00,0x04,0x10,0x02
,0x01,0x04,0x10,0x02,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x02
,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x01,0x00,0x10,0x02,0x01,0x04,0x00,0x00
,0x00,0x04,0x00,0x02,0x01,0x04,0x10,0x00,0x01,0x00,0x10,0x00,0x00,0x04,0x00,0x02
,0x01,0x00,0x00,0x02,0x00,0x00,0x10,0x02,0x00,0x04,0x10,0x02,0x01,0x00,0x10,0x00
,0x00,0x00,0x10,0x02,0x00,0x04,0x00,0x00,0x01,0x04,0x00,0x00,0x01,0x04,0x10,0x02
,0x00,0x04,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x10,0x00
,0x00,0x00,0x00,0x02,0x00,0x04,0x10,0x00,0x00,0x00,0x10,0x00,0x01,0x04,0x00,0x02
,0x01,0x04,0x00,0x02,0x01,0x00,0x10,0x02,0x01,0x00,0x10,0x02,0x01,0x00,0x00,0x00
,0x01,0x00,0x10,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x02,0x00,0x00,0x10,0x00
,0x00,0x04,0x10,0x02,0x01,0x04,0x00,0x00,0x01,0x04,0x10,0x00,0x00,0x04,0x10,0x02
,0x01,0x04,0x00,0x00,0x01,0x00,0x00,0x02,0x01,0x04,0x10,0x02,0x00,0x00,0x10,0x02
,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x04,0x10,0x02
,0x00,0x00,0x00,0x00,0x01,0x04,0x10,0x00,0x00,0x00,0x10,0x02,0x00,0x04,0x00,0x00
,0x01,0x00,0x00,0x02,0x00,0x04,0x00,0x02,0x00,0x04,0x00,0x00,0x01,0x00,0x10,0x00
,0x20,0x08,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x08,0x02,0x08
,0x00,0x00,0x00,0x08,0x20,0x08,0x00,0x08,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x08
,0x20,0x00,0x02,0x00,0x00,0x00,0x02,0x08,0x20,0x08,0x02,0x08,0x00,0x08,0x02,0x00
,0x00,0x08,0x02,0x08,0x20,0x08,0x02,0x00,0x00,0x08,0x00,0x00,0x20,0x00,0x00,0x00
,0x00,0x00,0x02,0x08,0x20,0x00,0x00,0x08,0x00,0x08,0x00,0x08,0x20,0x08,0x00,0x00
,0x00,0x08,0x02,0x00,0x20,0x00,0x02,0x00,0x20,0x00,0x02,0x08,0x00,0x08,0x02,0x08
,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x02,0x08
,0x20,0x00,0x00,0x08,0x00,0x08,0x00,0x08,0x20,0x08,0x02,0x00,0x00,0x00,0x02,0x00
,0x20,0x08,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x08,0x02,0x08,0x00,0x08,0x00,0x00
,0x20,0x00,0x00,0x00,0x20,0x00,0x02,0x08,0x00,0x08,0x00,0x00,0x20,0x08,0x02,0x00
,0x00,0x08,0x00,0x08,0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x02,0x08
,0x20,0x00,0x02,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x02,0x00,0x20,0x08,0x00,0x08
,0x00,0x00,0x00,0x00,0x20,0x08,0x02,0x08,0x20,0x00,0x02,0x00,0x20,0x00,0x00,0x08
,0x00,0x00,0x02,0x08,0x00,0x08,0x00,0x08,0x20,0x08,0x00,0x08,0x00,0x00,0x00,0x00
,0x20,0x08,0x02,0x08,0x00,0x08,0x02,0x00,0x00,0x08,0x02,0x00,0x20,0x08,0x00,0x00
,0x20,0x08,0x00,0x00,0x20,0x00,0x02,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x02,0x08
};

BYTE *dword_6E51A4=struct_800h;
BYTE  struct_80h[0x80]; // 存放密钥80h
LPVOID dword_6E51A0=&struct_80h; //为存放密钥 80h的缓冲区的地址

DWORD  dword_6D7030=0x0BB40E64E;


static int  dword_6DA6C0[]=  //bytebit
{
	0x080,0x040,0x020,0x010,0x08,0x04,0x02,0x01,0x08,0x04,0x02,0x01
};


static char totrot[] = 
{
	1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28,
	14, 17, 11, 24,  1,  5,
	 3, 28, 15,  6, 21, 10,
	23, 19, 12,  4, 26,  8,
	16,  7, 27, 20, 13,  2,
	41, 52, 31, 37, 47, 55,
	30, 40, 51, 45, 33, 48,
	44, 49, 39, 56, 34, 53,
	46, 42, 50, 36, 29, 32
};
 

static char pc1[] = {
	57, 49, 41, 33, 25, 17,  9,
	 1, 58, 50, 42, 34, 26, 18,
	10,  2, 59, 51, 43, 35, 27,
	19, 11,  3, 60, 52, 44, 36,

	63, 55, 47, 39, 31, 23, 15,
	 7, 62, 54, 46, 38, 30, 22,
	14,  6, 61, 53, 45, 37, 29,
	21, 13,  5, 28, 20, 12,  4
};



DWORD dword_6E519C=0;

//////////////////////////////////////////////////////////////////////////
 

//Des解密 8字节一解
BOOL Dec_TaoBao_Uid(unsigned char* buf ,int buflen)
{
	des_context ctx;
	des_set_key( &ctx,des_key );
	for(int i=0;i<(buflen/8);i++)
	{
		des_decrypt( &ctx, buf+i*8, buf+i*8 ); 
	}
	return TRUE;
}
 
BOOL Dec_TaoBao_Pass(unsigned char* buf,unsigned char* outbuf,int buflen)
{
	des3_context ctx3;
	des3_set_3keys( &ctx3,DES3_keys[0],DES3_keys[1],DES3_keys[2] );      
	for(int i=0;i<(buflen/8);i++)
	{
		des3_decrypt( &ctx3, buf+i*8, outbuf+i*8 );
	}
	return TRUE;
}
//////////////////////////////////////////////////////////////////////////

//变形des初始化key
void Bian_Des_SetKey(char* key)
{
	__asm
	{
		mov ecx ,key
		call sub_58CD00
	}
}


 BOOL decode_byte8(UCHAR *buf)
 {
	 __asm
	 {
		 mov edi,buf
		 call sub_58D2B0
	 }
	return TRUE;
 }


//taobao 旺旺文本解码
BOOL Bian_Dec_TaoBao(UCHAR *buf,int datalen)
{
	if(datalen>0)
	{
		for(int i=0;i<(datalen/8);i++)
		{
			decode_byte8(buf+i*8);
		}
	}
	else
		return FALSE;
	return TRUE;
}


 
void __declspec(naked) sub_58D0D0(DWORD arg_0)
{
	__asm
	{
		         push    ebx
                 movzx   ebx, byte ptr [eax]
                 push    ebp
                 mov     ebp, [esp+4+8]
                 mov     ecx, ebp
                 ror     ecx, 1
                 push    esi
                 mov     edx, ecx
                 shr     edx, 1Ah
                 xor     edx, ebx
                 movzx   ebx, byte ptr [eax+1]
                 and     edx, 3Fh
                 add     eax, 1
                 push    edi
                 mov     edi, dword_6E51A4 ; 
                 mov     esi, [edi+edx*4]
                 mov     edx, ecx
                 shr     edx, 16h
                 xor     edx, ebx
                 movzx   ebx, byte ptr [eax+1]
                 and     edx, 3Fh
                 or      esi, [edi+edx*4+100h]
                 add     eax, 1
                 mov     edx, ecx
                 shr     edx, 12h
                 xor     edx, ebx
                 movzx   ebx, byte ptr [eax+1]
                 and     edx, 3Fh
                 or      esi, [edi+edx*4+200h]
                 add     eax, 1
                 mov     edx, ecx
                 shr     edx, 0Eh
                 xor     edx, ebx
                 movzx   ebx, byte ptr [eax+1]
                 and     edx, 3Fh
                 or      esi, [edi+edx*4+300h]
                 add     eax, 1
                 mov     edx, ecx
                 shr     edx, 0Ah
                 xor     edx, ebx
                 movzx   ebx, byte ptr [eax+1]
                 and     edx, 3Fh
                 or      esi, [edi+edx*4+400h]
                 add     eax, 1
                 mov     edx, ecx
                 shr     edx, 6
                 xor     edx, ebx
                 add     eax, 1
                 and     edx, 3Fh
                 or      esi, [edi+edx*4+500h]
                 movzx   edx, byte ptr [eax+1]
                 movzx   eax, byte ptr [eax]
                 rol     ebp, 1
                 xor     ebp, edx
                 shr     ecx, 2
                 xor     ecx, eax
                 and     ebp, 3Fh
                 mov     eax, [edi+ebp*4+700h]
                 and     ecx, 3Fh
                 or      eax, [edi+ecx*4+600h]
                 pop     edi
                 or      eax, esi
                 pop     esi
                 pop     ebp
                 pop     ebx
                 retn
	}
}

//编码
 void __declspec(naked) sub_58D1A0(unsigned char* arg_0)
 {
	__asm
	{
		         sub     esp, 0Ch
                 push    ebx
                 push    ebp
                 mov     ebp, [esp+14h+4]
                 mov     eax, [ebp+0]
                 mov     ecx, [ebp+4]
                 mov     [esp+14h+4], eax
                 mov     dl, byte ptr [esp+14h+4+1]
                 mov     byte ptr [esp+14h+4+3], al
                 mov     [esp+14h-8], eax
                 movzx   eax, byte ptr [esp+14h-8+3]
                 mov     byte ptr [esp+14h+4], al
                 mov     al, byte ptr [esp+14h+4+2]
                 mov     byte ptr [esp+14h+4+1], al
                 mov     [esp+14h-4], ecx
                 movzx   eax, byte ptr [esp+14h-4+3]
                 push    esi
                 mov     esi, dword_6E51A0
                 mov     byte ptr [esp+18h+4+2], dl
                 push    edi
                 mov     edi, [esp+1Ch+4]
                 mov     [esp+1Ch+4], ecx
                 mov     byte ptr [esp+1Ch+4+3], cl
                 mov     cl, byte ptr [esp+1Ch+4+1]
                 mov     byte ptr [esp+1Ch+4], al
                 mov     al, byte ptr [esp+1Ch+4+2]
                 mov     byte ptr [esp+1Ch+4+2], cl
                 mov     byte ptr [esp+1Ch+4+1], al
                 mov     ebx, [esp+1Ch+4]
                 mov     [esp+1Ch-4], ebx
                 mov     [esp+1Ch+4], 0
 loc_58D215:                             ; CODE XREF: byte8_decode+A7.j
                 test    byte ptr [esp+1Ch+4], 1
                 mov     eax, esi
                 jz      short loc_58D22B
                 push    edi
                 call    sub_58D0D0
                 add     esp, 4
                 xor     ebx, eax
                 jmp     short loc_58D236
 loc_58D22B:                             ; CODE XREF: byte8_decode+7C.j
                 push    ebx
                 call    sub_58D0D0
                 add     esp, 4
                 xor     edi, eax
 loc_58D236:                             ; CODE XREF: byte8_decode+89.j
                 mov     eax, [esp+1Ch+4]
                 add     eax, 1
                 add     esi, 8
                 cmp     eax, 10h
                 mov     [esp+1Ch+4], eax
                 jl      short loc_58D215
                 mov     [esp+1Ch+4], ebx
                 mov     cl, byte ptr [esp+1Ch+4+2]
                 mov     [esp+1Ch-4], ebx
                 movzx   edx, byte ptr [esp+1Ch-4+3]
                 mov     byte ptr [esp+1Ch+4], dl
                 movzx   edx, byte ptr [esp+1Ch+4+1]
                 mov     eax, edi
                 mov     byte ptr [esp+1Ch+4+3], bl
                 mov     byte ptr [esp+1Ch+4+2], dl
                 mov     byte ptr [esp+1Ch+4+1], cl
                 mov     ecx, [esp+1Ch+4]
                 mov     [esp+1Ch+4], eax
                 movzx   edx, byte ptr [esp+1Ch+4+1]
                 mov     [esp+1Ch-0ch], eax
                 mov     byte ptr [esp+1Ch+4+3], al
                 movzx   eax, byte ptr [esp+1Ch-0ch+3]
                 mov     byte ptr [esp+1Ch+4], al
                 mov     al, byte ptr [esp+1Ch+4+2]
                 pop     edi
                 mov     byte ptr [esp+18h+4+2], dl
                 mov     byte ptr [esp+18h+4+1], al
                 mov     eax, [esp+18h+4]
                 mov     [ebp+0], ecx
                 pop     esi
                 mov     [ebp+4], eax
                 pop     ebp
                 pop     ebx
                 add     esp, 0Ch
                 retn
	}
 }
//解码
 void __declspec(naked) sub_58D2B0()
 {
	 __asm
	 {
		         sub     esp, 10h
                 mov     eax, [edi]
                 mov     ecx, [edi+4]
                 mov     [esp+10h-0ch], eax
                 mov     dl, byte ptr [esp+10h-0ch+1]
                 mov     byte ptr [esp+10h-0ch+3], al
                 mov     [esp+10h-8h], eax
                 movzx   eax, byte ptr [esp+10h-8h+3]
                 mov     byte ptr [esp+10h-0ch], al
                 mov     al, byte ptr [esp+10h-0ch+2]
                 mov     byte ptr [esp+10h-0ch+1], al
                 mov     [esp+10h-4h], ecx
                 movzx   eax, byte ptr [esp+10h-4h+3]
                 mov     [esp+10h-10h], ecx
                 mov     byte ptr [esp+10h-10h+3], cl
                 mov     cl, byte ptr [esp+10h-10h+1]
                 mov     byte ptr [esp+10h-10h], al
                 mov     al, byte ptr [esp+10h-10h+2]
                 push    ebx
                 push    esi
                 mov     esi, dword_6E51A0
                 mov     byte ptr [esp+18h-0ch+2], dl
                 mov     edx, [esp+18h-0ch]
                 mov     byte ptr [esp+18h-10h+2], cl
                 mov     byte ptr [esp+18h-10h+1], al
                 mov     ebx, [esp+18h-10h]
                 mov     [esp+18h-8h], ebx
                 mov     [esp+18h-4h], edx
				 xor     eax ,eax
				 mov     [esp+18h-0ch] ,eax
                 mov     [esp+18h-0ch], 0Fh
                 add     esi, 78h
 loc_58D323:                             ; CODE XREF: sub_58D2B0+AC.j
                 test    byte ptr [esp+18h-0ch], 1
                 jz      short loc_58D33B
                 push    ebx
                 mov     eax, esi
                 call    sub_58D0D0      
                 add     esp, 4
                 xor     [esp+18h-4h], eax
                 jmp     short loc_58D34C
 loc_58D33B:                             ; CODE XREF: sub_58D2B0+78.j
                 mov     eax, [esp+18h-4h]
                 push    eax
                 mov     eax, esi
                 call    sub_58D0D0
                 add     esp, 4
                 xor     ebx, eax
 loc_58D34C:                             ; CODE XREF: sub_58D2B0+89.j
                 mov     eax, [esp+18h-0ch]
                 sub     eax, 1
                 sub     esi, 8
                 test    eax, eax
                 mov     [esp+18h-0ch], eax
                 jge     short loc_58D323
                 mov     [esp+18h-0ch], ebx
                 movzx   edx, byte ptr [esp+18h-0ch+1]
                 mov     al, byte ptr [esp+18h-0ch+2]
                 mov     [esp+18h-8h], ebx
                 movzx   ecx, byte ptr [esp+18h-8h+3]
                 mov     byte ptr [esp+18h-0ch], cl
                 mov     ecx, [esp+18h-4h]
                 mov     byte ptr [esp+18h-0ch+3], bl
                 mov     byte ptr [esp+18h-0ch+2], dl
                 mov     byte ptr [esp+18h-0ch+1], al
                 mov     eax, [esp+18h-0ch]
                 mov     [esp+18h-0ch], ecx
                 movzx   edx, byte ptr [esp+18h-0ch+1]
                 mov     byte ptr [esp+18h-0ch+3], cl
                 movzx   ecx, byte ptr [esp+18h-4h+3]
                 mov     byte ptr [esp+18h-0ch], cl
                 mov     cl, byte ptr [esp+18h-0ch+2]
                 mov     byte ptr [esp+18h-0ch+2], dl
                 mov     byte ptr [esp+18h-0ch+1], cl
                 mov     ecx, [esp+18h-0ch]
                 pop     esi
                 mov     [edi], eax
                 mov     [edi+4], ecx
                 pop     ebx
                 add     esp, 10h
                 retn
	 }
 }


  void __declspec(naked) sub_5F109E()
 {
	__asm
	{
		     cmp     ecx, dword_6D7030
             jnz     short loc_5F10A8
             rep retn
 loc_5F10A8:                             ; CODE XREF: sub_5F109E+6.j
                ; jmp     loc_5F1694
	}
 }
 
 
//初始化变形des　的key
void __declspec(naked) sub_58CD00()
{
	__asm
	{
		        sub     esp, 80h
                mov     eax, dword_6D7030
                xor     eax, esp
                mov     [esp+80h-4], eax
                cmp     dword_6E519C, 2
                mov     eax, dword_6E51A0
                push    esi
                mov     esi, ecx        ; 8字节密钥
                jnz     short loc_58CD84 ; 初始80h
                add     eax, 2
                mov     ecx, 10h
                lea     ebx, [ebx+0]
loc_58CD30:                             ; CODE XREF: sub_58CD00+6F.j
                movzx   edx, byte ptr [esi]
                mov     [eax-2], dl
                movzx   edx, byte ptr [esi+1]
                mov     [eax-1], dl
                movzx   edx, byte ptr [esi+2]
                mov     [eax], dl
                movzx   edx, byte ptr [esi+3]
                mov     [eax+1], dl
                movzx   edx, byte ptr [esi+4]
                mov     [eax+2], dl
                movzx   edx, byte ptr [esi+5]
                mov     [eax+3], dl
                movzx   edx, byte ptr [esi+6]
                mov     [eax+4], dl
                movzx   edx, byte ptr [esi+7]
                mov     [eax+5], dl
                add     esi, 8
                add     eax, 8
                sub     ecx, 1
                jnz     short loc_58CD30
                pop     esi
                mov     ecx, [esp+80h-4]
                xor     ecx, esp
                call    sub_5F109E
                add     esp, 80h
                retn
loc_58CD84:                             ; CODE XREF: sub_58CD00+20.j
//                 push    80h
//                 push    0
//                push    eax
//                 call    memset
//                add     esp, 0Ch
                xor     eax, eax
                jmp     short loc_58CDA0
                align 10h
loc_58CDA0:                             ; CODE XREF: sub_58CD00+96.j
                movsx   ecx, pc1[eax]
                sub     ecx, 1
                mov     edx, ecx
                sar     edx, 3
                movsx   edx, byte ptr [edx+esi]
                and     ecx, 7
                test    dword_6DA6C0[ecx*4], edx
                setnz   cl
                mov     [esp+eax+84h-3Ch], cl
                movsx   ecx, /*byte_6DA429*/pc1[eax+1]
                sub     ecx, 1
                mov     edx, ecx
                sar     edx, 3
                movsx   edx, byte ptr [edx+esi]
                and     ecx, 7
                test    dword_6DA6C0[ecx*4], edx
                setnz   cl
                mov     [esp+eax+84h-3Bh], cl
                movsx   ecx, /*byte_6DA42A*/pc1[eax+2]
                sub     ecx, 1
                mov     edx, ecx
                sar     edx, 3
                movsx   edx, byte ptr [edx+esi]
                and     ecx, 7
                test    dword_6DA6C0[ecx*4], edx
                setnz   cl
                mov     [esp+eax+84h-3Ah], cl
                movsx   ecx, /*byte_6DA42B*/pc1[eax+3]
                sub     ecx, 1
                mov     edx, ecx
                sar     edx, 3
                movsx   edx, byte ptr [edx+esi]
                and     ecx, 7
                test    dword_6DA6C0[ecx*4], edx
                setnz   cl
                mov     [esp+eax+84h-39h], cl
                add     eax, 4
                cmp     eax, 38h
                jl      loc_58CDA0
                push    ebx
                push    ebp
                push    edi
                xor     edi, edi
loc_58CE41:                             ; CODE XREF: sub_58CD00+3A2.j
                movsx   ecx, totrot[edi]
                xor     eax, eax
                sub     ecx, 1Ah
                lea     ecx, [ecx+0]
loc_58CE50:                             ; CODE XREF: sub_58CD00+1ED.j
                xor     edx, edx
                cmp     eax, 1Ch
                setnl   dl
                lea     esi, [ecx+1Ah]
                sub     edx, 1
                and     edx, 0FFFFFFE4h
                add     edx, 38h
                cmp     esi, edx
                jl      short loc_58CE6B
                lea     esi, [ecx-2]
loc_58CE6B:                             ; CODE XREF: sub_58CD00+166.j
                mov     dl, [esp+esi+90h-3Ch]
                lea     esi, [esp+90h-74h]
                mov     [esi+eax], dl
                xor     edx, edx
                cmp     eax, 1Bh
                setnl   dl
                lea     esi, [ecx+1Bh]
                sub     edx, 1
                and     edx, 0FFFFFFE4h
                add     edx, 38h
                cmp     esi, edx
                jl      short loc_58CE91
                lea     esi, [ecx-1]
loc_58CE91:                             ; CODE XREF: sub_58CD00+18C.j
                mov     dl, [esp+esi+90h-3Ch]
                xor     ebx, ebx
                mov     byte ptr [esp+eax+90h-74h+1], dl
                lea     edx, [eax+2]
                cmp     edx, 1Ch
                setnl   bl
                lea     esi, [ecx+1Ch]
                sub     ebx, 1
                and     ebx, 0FFFFFFE4h
                add     ebx, 38h
                cmp     esi, ebx
                jl      short loc_58CEB6
                mov     esi, ecx
loc_58CEB6:                             ; CODE XREF: sub_58CD00+1B2.j
                mov     dl, [esp+esi+90h-3Ch]
                lea     esi, [esp+90h-74h+2]
                mov     [esi+eax], dl
                xor     edx, edx
                cmp     eax, 19h
                setnl   dl
                lea     esi, [ecx+1Dh]
                sub     edx, 1
                and     edx, 0FFFFFFE4h
                add     edx, 38h
                cmp     esi, edx
                jl      short loc_58CEDC
                lea     esi, [ecx+1]
loc_58CEDC:                             ; CODE XREF: sub_58CD00+1D7.j
                mov     dl, [esp+esi+90h-3Ch]
                mov     byte ptr [esp+eax+90h-74h+3], dl
                add     eax, 4
                add     ecx, 4
                cmp     eax, 38h
                jl      loc_58CE50
                xor     ecx, ecx
                mov     dword ptr[esp+90h-80h], 5
                mov     dword ptr[esp+90h-78h], 4
                mov     dword ptr[esp+90h-7Ch], 3
                lea     ebp, [ecx+2]
                mov     esi, 1
                jmp     short loc_58CF20
                align 10h
loc_58CF20:                             ; CODE XREF: sub_58CD00+215.j
                movsx   eax, /*byte_6DA46F*/totrot[esi+0fh]
                cmp     byte ptr [esp+eax+90h-78h+3], 0
                jz      short loc_58CF58
                mov     ebx, dword_6E51A0
                mov     eax, 0AAAAAAABh
                mul     ecx
                shr     edx, 2
                lea     eax, [edx+edi*8]
                lea     edx, [edx+edx*2]
                add     eax, ebx
                add     edx, edx
                mov     ebx, ecx
                sub     ebx, edx
                mov     edx, dword_6DA6C0[ebx*4]
                sar     edx, 2
                or      [eax], dl
loc_58CF58:                             ; CODE XREF: sub_58CD00+22C.j
                movsx   eax, /*pc2*/totrot[esi+10h]
                cmp     byte ptr [esp+eax+90h-78h+3], 0
                jz      short loc_58CF90
                mov     ebx, dword_6E51A0
                mov     eax, 0AAAAAAABh
                mul     esi
                shr     edx, 2
                lea     eax, [edx+edi*8]
                lea     edx, [edx+edx*2]
                add     eax, ebx
                add     edx, edx
                mov     ebx, ecx
                sub     ebx, edx
                mov     edx, /*dword_6DA6C4*/dword_6DA6C0[ebx*4+4]
                sar     edx, 2
                or      [eax], dl
loc_58CF90:                             ; CODE XREF: sub_58CD00+264.j
                movsx   eax, ss:/*pc2*/totrot[ebp+0x10]
                cmp     byte ptr [esp+eax+90h-78h+3], 0
                jz      short loc_58CFC8
                mov     ebx, dword_6E51A0
                mov     eax, 0AAAAAAABh
                mul     ebp
                shr     edx, 2
                lea     eax, [edx+edi*8]
                lea     edx, [edx+edx*2]
                add     eax, ebx
                add     edx, edx
                mov     ebx, ecx
                sub     ebx, edx
                mov     edx, /*dword_6DA6C8*/dword_6DA6C0[ebx*4+8]
                sar     edx, 2
                or      [eax], dl
loc_58CFC8:                             ; CODE XREF: sub_58CD00+29C.j
                mov     edx, [esp+90h-7Ch]
                movsx   eax, /*pc2*/totrot[edx+10h]
                cmp     byte ptr [esp+eax+90h-78h+3], 0
                jz      short loc_58D004
                mov     ebx, dword_6E51A0
                mov     eax, 0AAAAAAABh
                mul     edx
                shr     edx, 2
                lea     eax, [edx+edi*8]
                lea     edx, [edx+edx*2]
                add     eax, ebx
                add     edx, edx
                mov     ebx, ecx
                sub     ebx, edx
                mov     edx, /*dword_6DA6CC*/dword_6DA6C0[ebx*4+0ch]
                sar     edx, 2
                or      [eax], dl
loc_58D004:                             ; CODE XREF: sub_58CD00+2D8.j
                mov     edx, [esp+90h-78h]
                movsx   eax, /*pc2*/totrot[edx+10h]
                cmp     byte ptr [esp+eax+90h-78h+3], 0
                jz      short loc_58D040
                mov     ebx, dword_6E51A0
                mov     eax, 0AAAAAAABh
                mul     edx
                shr     edx, 2
                lea     eax, [edx+edi*8]
                lea     edx, [edx+edx*2]
                add     eax, ebx
                add     edx, edx
                mov     ebx, ecx
                sub     ebx, edx
                mov     edx, /*dword_6DA6D0*/dword_6DA6C0[ebx*4+10h]
                sar     edx, 2
                or      [eax], dl
loc_58D040:                             ; CODE XREF: sub_58CD00+314.j
                mov     edx, [esp+90h-80h]
                movsx   eax, /*pc2*/totrot[edx+10h]
                cmp     byte ptr [esp+eax+90h-78h+3], 0
                jz      short loc_58D07C
                mov     ebx, dword_6E51A0
                mov     eax, 0AAAAAAABh
                mul     edx
                shr     edx, 2
                lea     eax, [edx+edi*8]
                lea     edx, [edx+edx*2]
                add     eax, ebx
                add     edx, edx
                mov     ebx, ecx
                sub     ebx, edx
                mov     edx, /*dword_6DA6D4*/dword_6DA6C0[ebx*4+14h]
                sar     edx, 2
                or      [eax], dl
loc_58D07C:                             ; CODE XREF: sub_58CD00+350.j
                mov     eax, 6
                add     [esp+90h-7Ch], eax
                add     [esp+90h-78h], eax
                add     [esp+90h-80h], eax
                add     esi, eax
                add     ecx, eax
                add     ebp, eax
                cmp     esi, 31h
                jl      loc_58CF20
                add     edi, 1
                cmp     edi, 10h
                jl      loc_58CE41
                mov     ecx, [esp+90h-4]
                pop     edi
                pop     ebp
                pop     ebx
                pop     esi
                xor     ecx, esp
                call    sub_5F109E
                add     esp, 80h
                retn
	}
}
//////////////////////////////////////////////////////////////////////////
void DeCode(const int m/*保留*/,const int n,/*保留*/char *buf,
      int bufSize,int fOffset,const int l/*保留*/)
{
  unsigned int p_count,p_deCode=fOffset;
  char *p_buf=buf;
  unsigned char *p_pdeCode=(unsigned char *)&p_deCode;
  for(p_count=0;p_count<bufSize;p_count++)
  {
      p_buf[p_count]=(g_buf[p_pdeCode[1]]+g_buf[p_pdeCode[2]]-g_buf[p_pdeCode[3]])^g_buf[p_pdeCode[0]]^p_buf[p_count];
      p_deCode+=1;
  }
}
